AWSTemplateFormatVersion: '2010-09-09'

Parameters:

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances access to the Internet.

  SubnetId:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at two subnets in your selected VPC.
  ApiAuthorizationKey:
    Type: String
    Description: CSGO API_AUTHORIZATION_KEY

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.micro
    AllowedValues: [t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge, m5.large, m5.xlarge,
                    m5.2xlarge, m5.4xlarge, m5.8xlarge, m5.12xlarge, m5.16xlarge, m5.24xlarge]
    ConstraintDescription: Please choose a valid instance type.

  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of instances to launch in your ECS cluster.

  MaxSize:
    Type: Number
    Default: '1'
    Description: Maximum number of instances that can be launched in your ECS cluster.

Mappings:

  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-0aee8ced190c05726
    us-east-2:
      AMIID: ami-0d9ef3d936a8fa1c6
    us-west-1:
      AMIID: ami-0fc0ce1549e302a52
    us-west-2:
      AMIID: ami-088bb4cd2f62fc0e1
    eu-west-1:
      AMIID: ami-0a74b180a0c97ecd1
    eu-west-2:
      AMIID: ami-04967dd60612d3b49
    eu-west-3:
      AMIID: ami-032a9f3e531acca53
    eu-central-1:
      AMIID: ami-0d2e4df42e13655e0
    eu-north-1:
      AMIID: ami-0431cac535d281688
    ap-northeast-1:
      AMIID: ami-03179588b2f59f257
    ap-northeast-2:
      AMIID: ami-00ec0bddfbdd6e1c1
    ap-south-1:
      AMIID: ami-0b9d66ddb2a9f47d1
    ap-southeast-1:
      AMIID: ami-0fd3e3d7875748187
    ap-southeast-2:
      AMIID: ami-029bf83e14803c25f
    ca-central-1:
      AMIID: ami-0c54fd41f64065620
    sa-east-1:
      AMIID: ami-0d6ac368fff49ff2d

Resources:

  ECSCluster:
    Type: AWS::ECS::Cluster

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref VpcId

  EcsSecurityGroupCSGOinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 27010
      ToPort: 27020
      CidrIp: 0.0.0.0/0

  EcsSecurityGroupSSHinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0

  EcsSecurityGroupALBports:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 27010
      ToPort: 27020
      SourceSecurityGroupId: !Ref EcsSecurityGroup

  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub 'ECSLogGroup-${AWS::StackName}'
      RetentionInDays: 3

  CsGoServerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${AWS::StackName}-csgo-server'
      ContainerDefinitions:
        - Name: csgo-server
          Essential: true
          Image: crazymax/csgo-server-launcher
          Memory: 512
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudwatchLogsGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: csgo-server
          PortMappings:
            - ContainerPort: 27015
              HostPort: 27015
          Environment:
            - Name: API_AUTHORIZATION_KEY
              Value: !Ref ApiAuthorizationKey

  ECSNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ECSNLB
      Scheme: internet-facing
      Type: network
      Subnets: !Ref SubnetId

  NLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ECSServiceRole
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSTG
      LoadBalancerArn: !Ref ECSNLB
      Port: 27015
      Protocol: TCP_UDP

  ECSTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ECSNLB
    Properties:
      Name: ECSTG
      TargetType: instance
      VpcId: !Ref VpcId
      Port: 27015
      Protocol: TCP_UDP

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref 'SubnetId'
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: '1'
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredCapacity'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'

  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [application-autoscaling.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'application-autoscaling:*'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:PutMetricAlarm'
                  - 'ecs:DescribeServices'
                  - 'ecs:UpdateService'
                Resource: '*'

  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
      SecurityGroups: [!Ref EcsSecurityGroup]
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}

  CsGoServerService:
    Type: AWS::ECS::Service
    DependsOn: NLBListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: csgo-server
          ContainerPort: 27015
          TargetGroupArn: !Ref ECSTG
      Role: !Ref ECSServiceRole
      TaskDefinition: !Ref CsGoServerTaskDefinition

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ['elasticloadbalancing:DeregisterInstancesFromLoadBalancer', 'elasticloadbalancing:DeregisterTargets',
                         'elasticloadbalancing:Describe*', 'elasticloadbalancing:RegisterInstancesWithLoadBalancer',
                         'elasticloadbalancing:RegisterTargets', 'ec2:Describe*', 'ec2:AuthorizeSecurityGroupIngress']
                Resource: '*'

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ['ecs:CreateCluster', 'ecs:DeregisterContainerInstance', 'ecs:DiscoverPollEndpoint',
                         'ecs:Poll', 'ecs:RegisterContainerInstance', 'ecs:StartTelemetrySession',
                         'ecs:Submit*', 'logs:CreateLogStream', 'logs:PutLogEvents']
                Resource: '*'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref EC2Role]

Outputs:

  CsGoServerService:
    Value: !Ref CsGoServerService

  ecscluster:
    Value: !Ref ECSCluster

  ECSNLB:
    Description: Your ALB DNS URL
    Value: !GetAtt [ECSNLB, DNSName]

  CsGoServerTaskDefinition:
    Value: !Ref CsGoServerTaskDefinition
